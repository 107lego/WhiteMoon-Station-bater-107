name: Report Issue to Upstream

on:
  issue_comment:
    types: [created]

jobs:
  report-upstream:
    if: github.event.issue.pull_request == null && startsWith(github.event.comment.body, '/report_upstream')
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Parse command
        id: parse_command
        uses: actions/github-script@v6
        with:
          script: |
            console.log('Starting command parsing...');
            const command = context.payload.comment.body.trim();
            console.log(`Received command: ${command}`);
            const parts = command.split(' ');

            // Default to bubber if no target specified
            if (parts.length === 1) {
              console.log('No target specified, defaulting to bubber');
              core.setOutput('valid', 'true');
              core.setOutput('target', 'bubber');
              core.setOutput('owner', 'Bubberstation');
              core.setOutput('repo', 'Bubberstation');
              return;
            }

            if (parts.length !== 2) {
              console.log('Invalid command format detected');
              core.setOutput('valid', 'false');
              core.setOutput('error', 'Invalid command format. Use `/report_upstream` or `/report_upstream tg`');
              return;
            }

            const target = parts[1].toLowerCase();
            console.log(`Target specified: ${target}`);
            if (target === 'tg') {
              core.setOutput('valid', 'true');
              core.setOutput('target', 'tg');
              core.setOutput('owner', 'tgstation');
              core.setOutput('repo', 'tgstation');
            } else if (target === 'bubber') {
              core.setOutput('valid', 'true');
              core.setOutput('target', 'bubber');
              core.setOutput('owner', 'Bubberstation');
              core.setOutput('repo', 'Bubberstation');
            } else if (target === 'testing') {
              core.setOutput('valid', 'true');
              core.setOutput('target', 'testing');
              core.setOutput('owner', 'MosleyTheMalO');
              core.setOutput('repo', 'Bubberstation');
            } else {
              console.log(`Invalid target specified: ${target}`);
              core.setOutput('valid', 'false');
              core.setOutput('error', 'Invalid target. Use `tg`, or omit target to report to Bubberstation');
            }

      - name: Debug parse command output
        run: |
          echo "Valid: ${{ steps.parse_command.outputs.valid }}"
          echo "Target: ${{ steps.parse_command.outputs.target }}"
          echo "Owner: ${{ steps.parse_command.outputs.owner }}"
          echo "Repo: ${{ steps.parse_command.outputs.repo }}"
          echo "Error: ${{ steps.parse_command.outputs.error }}"

      - name: Comment on invalid command
        if: steps.parse_command.outputs.valid == 'false'
        uses: actions/github-script@v6
        with:
          script: |
            console.log('Commenting on invalid command...');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `> ${context.payload.comment.body}\n\n❌ ${steps.parse_command.outputs.error}`
            });

      - name: Check if user is maintainer
        if: steps.parse_command.outputs.valid == 'true'
        id: check_permissions
        uses: actions/github-script@v6
        with:
          script: |
            console.log('Checking user permissions...');
            const response = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              username: context.actor
            });
            console.log(`User permission level: ${response.data.permission}`);
            const isMaintainer = response.data.permission === 'maintain' || response.data.permission === 'admin' || response.data.permission === 'write';
            console.log(`Is maintainer: ${isMaintainer}`);
            core.setOutput('is_maintainer', isMaintainer.toString());
            return isMaintainer;

      - name: Debug permissions output
        if: steps.parse_command.outputs.valid == 'true'
        run: |
          echo "Is maintainer: ${{ steps.check_permissions.outputs.is_maintainer }}"

      - name: Get issue details
        if: steps.parse_command.outputs.valid == 'true' && steps.check_permissions.outputs.is_maintainer == 'true'
        id: get_issue
        uses: actions/github-script@v6
        with:
          script: |
            console.log('Fetching issue details...');
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            console.log(`Issue title: ${issue.data.title}`);
            console.log(`Issue has ${issue.data.labels.length} labels`);
            core.setOutput('title', issue.data.title);
            core.setOutput('body', issue.data.body);
            core.setOutput('labels', JSON.stringify(issue.data.labels.map(label => label.name)));
            core.setOutput('html_url', issue.data.html_url);

      - name: Debug issue details
        if: steps.parse_command.outputs.valid == 'true' && steps.check_permissions.outputs.is_maintainer == 'true'
        run: |
          echo "Issue title: ${{ steps.get_issue.outputs.title }}"
          echo "Issue URL: ${{ steps.get_issue.outputs.html_url }}"

      - name: Check for existing upstream issue
        if: steps.parse_command.outputs.valid == 'true' && steps.check_permissions.outputs.is_maintainer == 'true'
        id: check_upstream
        uses: actions/github-script@v6
        with:
          script: |
            console.log('Checking for existing upstream issue...');

            // Get the values from previous steps
            const owner = '${{ steps.parse_command.outputs.owner }}';
            const repo = '${{ steps.parse_command.outputs.repo }}';
            const title = '${{ steps.get_issue.outputs.title }}';

            // Validate inputs
            if (!owner || !repo || !title) {
              console.error('Missing required inputs:');
              console.error(`Owner: ${owner}`);
              console.error(`Repo: ${repo}`);
              console.error(`Title: ${title}`);
              throw new Error('Missing required inputs for upstream issue check');
            }

            console.log(`Searching in ${owner}/${repo} for title: ${title}`);
            const searchQuery = `repo:${owner}/${repo} in:title ${title}`;
            console.log(`Search query: ${searchQuery}`);

            try {
              const searchResults = await github.rest.search.issuesAndPullRequests({
                q: searchQuery
              });
              console.log(`Found ${searchResults.data.items.length} potential matches`);

              // Check if any of the search results match our issue title exactly
              const existingIssue = searchResults.data.items.find(item =>
                item.title.toLowerCase() === title.toLowerCase()
              );

              if (existingIssue) {
                console.log(`Found existing issue: ${existingIssue.html_url}`);
                core.setOutput('exists', 'true');
                core.setOutput('url', existingIssue.html_url);
              } else {
                console.log('No existing issue found');
                core.setOutput('exists', 'false');
              }
            } catch (error) {
              console.error('Error searching for existing issues:', error);
              console.error('Error details:', {
                message: error.message,
                status: error.status,
                response: error.response?.data
              });
              throw error;
            }

      - name: Debug upstream check
        if: steps.parse_command.outputs.valid == 'true' && steps.check_permissions.outputs.is_maintainer == 'true'
        run: |
          echo "Issue exists: ${{ steps.check_upstream.outputs.exists }}"
          echo "Issue URL: ${{ steps.check_upstream.outputs.url }}"

      - name: Create upstream issue
        if: steps.parse_command.outputs.valid == 'true' && steps.check_permissions.outputs.is_maintainer == 'true' && steps.check_upstream.outputs.exists == 'false'
        id: create_upstream
        uses: actions/github-script@v6
        with:
          script: |
            console.log('Attempting to create upstream issue...');
            try {
              // Get values from previous steps
              const owner = '${{ steps.parse_command.outputs.owner }}';
              const repo = '${{ steps.parse_command.outputs.repo }}';
              const title = '${{ steps.get_issue.outputs.title }}';
              const body = '${{ steps.get_issue.outputs.body }}';
              const html_url = '${{ steps.get_issue.outputs.html_url }}';
              const labelsStr = '${{ steps.get_issue.outputs.labels }}';
              const target = '${{ steps.parse_command.outputs.target }}';

              // Parse labels
              let labels;
              try {
                labels = JSON.parse(labelsStr);
              } catch (e) {
                console.error('Failed to parse labels:', e);
                labels = [];
              }

              // Validate inputs
              if (!owner || !repo || !title || !body || !html_url) {
                console.error('Missing required inputs:');
                console.error(`Owner: ${owner}`);
                console.error(`Repo: ${repo}`);
                console.error(`Title: ${title}`);
                console.error(`Body: ${body}`);
                console.error(`HTML URL: ${html_url}`);
                throw new Error('Missing required inputs for creating upstream issue');
              }

              const issue = await github.rest.issues.create({
                owner: owner,
                repo: repo,
                title: title,
                body: `# Original issue: ${html_url}\n\n${body}`,
                labels: labels
              });
              console.log(`Successfully created issue: ${issue.data.html_url}`);
              core.setOutput('success', 'true');
              core.setOutput('url', issue.data.html_url);

              // Add comment to original issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `> ${context.payload.comment.body}\n\n✅ Issue successfully reported to ${target}: ${issue.data.html_url}`
              });
            } catch (error) {
              console.error('Failed to create upstream issue:', error);
              console.error('Error details:', {
                message: error.message,
                status: error.status,
                response: error.response?.data
              });
              core.setOutput('success', 'false');
              core.setOutput('error', error.message);
            }

      - name: Comment on existing upstream issue
        if: steps.parse_command.outputs.valid == 'true' && steps.check_permissions.outputs.is_maintainer == 'true' && steps.check_upstream.outputs.exists == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            console.log('Commenting on existing upstream issue...');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `> ${context.payload.comment.body}\n\n⚠️ This issue appears to have already been reported to ${steps.parse_command.outputs.target}: ${steps.check_upstream.outputs.url}`
            });

      - name: Comment on failure
        if: steps.parse_command.outputs.valid == 'true' && steps.check_permissions.outputs.is_maintainer == 'true' && steps.create_upstream.outputs.success == 'false'
        uses: actions/github-script@v6
        with:
          script: |
            console.log('Commenting on failure...');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `> ${context.payload.comment.body}\n\n❌ Failed to report issue to ${steps.parse_command.outputs.target}: ${steps.create_upstream.outputs.error}`
            });
